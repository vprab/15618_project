`timescale 1ns / 1ps

typedef int TYPE;

module testpool();

    TYPE img [9:0][9:0];
    TYPE pooled[4:0][4:0];
    pool #(10, 10) P(img, pooled);
    TYPE answer[4:0][4:0]; 
    
    
    initial begin
        img = {{32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8, 32'd9},
               {32'd9, 32'd8, 32'd7, 32'd6, 32'd5, 32'd4, 32'd3, 32'd2, 32'd1, 32'd0},
               {32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8, 32'd9},
               {32'd9, 32'd8, 32'd7, 32'd6, 32'd5, 32'd4, 32'd3, 32'd2, 32'd1, 32'd0},
               {32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8, 32'd9},
               {32'd9, 32'd8, 32'd7, 32'd6, 32'd5, 32'd4, 32'd3, 32'd2, 32'd1, 32'd0},
               {32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8, 32'd9},
               {32'd9, 32'd8, 32'd7, 32'd6, 32'd5, 32'd4, 32'd3, 32'd2, 32'd1, 32'd0},
               {32'd0, 32'd1, 32'd2, 32'd3, 32'd4, 32'd5, 32'd6, 32'd7, 32'd8, 32'd9},
               {32'd9, 32'd8, 32'd7, 32'd6, 32'd5, 32'd4, 32'd3, 32'd2, 32'd1, 32'd0}};
               
        answer = {{32'd9, 32'd7, 32'd5, 32'd7, 32'd9},
                  {32'd9, 32'd7, 32'd5, 32'd7, 32'd9},
                  {32'd9, 32'd7, 32'd5, 32'd7, 32'd9},
                  {32'd9, 32'd7, 32'd5, 32'd7, 32'd9},
                  {32'd9, 32'd7, 32'd5, 32'd7, 32'd9}};
                  
        assert(answer == pooled);
    end
endmodule